import os
import sqlite3
from datetime import datetime
import pytz
from aiogram import Bot, Dispatcher, executor, types
from dotenv import load_dotenv
import logging
from openpyxl import Workbook
from openpyxl.styles import Font, Alignment

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    filename="data/bot.log"
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    logger.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
ADMINS = [376996574]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID (—É–∑–Ω–∞—Ç—å —á–µ—Ä–µ–∑ @userinfobot)
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def get_db():
    conn = sqlite3.connect('data/shifts.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute('''CREATE TABLE IF NOT EXISTS shifts
                    (id INTEGER PRIMARY KEY AUTOINCREMENT,
                     user_id INTEGER NOT NULL,
                     user_name TEXT NOT NULL,
                     start_time TEXT NOT NULL,
                     end_time TEXT,
                     comment TEXT)''')
    conn.commit()
    return conn, cursor

conn, cursor = get_db()

# –£—Ç–∏–ª–∏—Ç—ã
def current_time():
    return datetime.now(MOSCOW_TZ).strftime("%Y-%m-%d %H:%M:%S")

def format_time(db_time):
    if not db_time:
        return None
    dt = datetime.strptime(db_time, "%Y-%m-%d %H:%M:%S")
    return dt.astimezone(MOSCOW_TZ)

# ================= –ö–û–ú–ê–ù–î–´ –î–õ–Ø –í–°–ï–• =================
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    text = """
üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ä–∞–±–æ—á–∏—Ö —Å–º–µ–Ω (–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è).

üìå –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start_shift - –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É
/end_shift - –ó–∞–∫–æ–Ω—á–∏—Ç—å —Å–º–µ–Ω—É
/my_shifts - –ú–æ–∏ —Å–º–µ–Ω—ã
    """
    await message.answer(text)

@dp.message_handler(commands=['start_shift'])
async def start_shift(message: types.Message):
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    
    cursor.execute("SELECT * FROM shifts WHERE user_id=? AND end_time IS NULL", (user_id,))
    if cursor.fetchone():
        await message.answer("‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞!")
        return
    
    cursor.execute("INSERT INTO shifts (user_id, user_name, start_time) VALUES (?, ?, ?)", 
                  (user_id, user_name, current_time()))
    conn.commit()
    await message.answer(f"‚úÖ –°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞ –≤ {format_time(current_time()).strftime('%H:%M %d.%m.%Y')}")

@dp.message_handler(commands=['end_shift'])
async def end_shift(message: types.Message):
    user_id = message.from_user.id
    
    cursor.execute("SELECT id, start_time FROM shifts WHERE user_id=? AND end_time IS NULL", (user_id,))
    shift = cursor.fetchone()
    
    if not shift:
        await message.answer("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã!")
        return
    
    cursor.execute("UPDATE shifts SET end_time=? WHERE id=?", (current_time(), shift[0]))
    conn.commit()
    
    start_dt = format_time(shift[1])
    end_dt = format_time(current_time())
    duration = end_dt - start_dt
    
    await message.answer(
        f"‚èπ –°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ {end_dt.strftime('%H:%M %d.%m.%Y')}\n"
        f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}"
    )

@dp.message_handler(commands=['my_shifts'])
async def my_shifts(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("""
        SELECT start_time, end_time 
        FROM shifts 
        WHERE user_id=?
        ORDER BY start_time DESC
        LIMIT 10
    """, (user_id,))
    
    shifts = cursor.fetchall()
    
    if not shifts:
        await message.answer("üì≠ –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å–º–µ–Ω")
        return
    
    text = "üìÖ –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–º–µ–Ω—ã (–ú–°–ö):\n\n"
    for i, (start, end) in enumerate(shifts, 1):
        start_dt = format_time(start)
        text += f"{i}. üü¢ {start_dt.strftime('%H:%M %d.%m.%Y')}\n"
        
        if end:
            end_dt = format_time(end)
            duration = end_dt - start_dt
            text += f"   üî¥ {end_dt.strftime('%H:%M %d.%m.%Y')}\n"
            text += f"   ‚è± {duration}\n\n"
        else:
            text += "   üü† –í –ø—Ä–æ—Ü–µ—Å—Å–µ\n\n"
    
    await message.answer(text)

# ================= –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–´ (EXCEL) =================
@dp.message_handler(commands=['export'])
async def export_shifts(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        cursor.execute("""
            SELECT 
                user_id,
                user_name,
                strftime('%d.%m.%Y %H:%M', start_time, 'localtime') as start,
                CASE WHEN end_time IS NULL 
                     THEN '–í –ø—Ä–æ—Ü–µ—Å—Å–µ' 
                     ELSE strftime('%d.%m.%Y %H:%M', end_time, 'localtime') 
                END as end,
                CASE WHEN end_time IS NULL 
                     THEN '-' 
                     ELSE round((julianday(end_time) - julianday(start_time)) * 24, 2) 
                END as hours
            FROM shifts
            ORDER BY start_time DESC
        """)
        
        shifts = cursor.fetchall()
        
        if not shifts:
            await message.answer("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–º–µ–Ω–∞—Ö")
            return

        # –°–æ–∑–¥–∞–µ–º Excel-—Ñ–∞–π–ª
        filename = f"data/shifts_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx"
        wb = Workbook()
        ws = wb.active
        ws.title = "–°–º–µ–Ω—ã"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = ["ID", "–§–ò–û", "–ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã", "–ö–æ–Ω–µ—Ü —Å–º–µ–Ω—ã", "–ß–∞—Å—ã"]
        ws.append(headers)
        
        # –°—Ç–∏–ª–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        bold_font = Font(bold=True)
        center_alignment = Alignment(horizontal='center')
        for cell in ws[1]:
            cell.font = bold_font
            cell.alignment = center_alignment
        
        # –î–∞–Ω–Ω—ã–µ
        for shift in shifts:
            ws.append(shift)
        
        # –ê–≤—Ç–æ-—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        for col in ws.columns:
            column = col[0].column_letter
            max_length = max(len(str(cell.value)) for cell in col)
            adjusted_width = (max_length + 2) * 1.2
            ws.column_dimensions[column].width = adjusted_width
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        wb.save(filename)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(filename, 'rb') as file:
            await message.answer_document(
                document=file,
                caption=f"üìä –û—Ç—á–µ—Ç –ø–æ —Å–º–µ–Ω–∞–º ({len(shifts)} –∑–∞–ø–∏—Å–µ–π)"
            )
            
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
        logger.exception("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:")

@dp.message_handler(commands=['stats'])
async def show_stats(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    cursor.execute("""
        SELECT 
            user_name,
            COUNT(*) as total_shifts,
            SUM(CASE WHEN end_time IS NULL THEN 1 ELSE 0 END) as active_shifts,
            ROUND(SUM((julianday(end_time) - julianday(start_time)) * 24, 1) as total_hours
        FROM shifts
        GROUP BY user_id
        ORDER BY total_shifts DESC
    """)
    
    stats = cursor.fetchall()
    
    text = "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º:</b>\n\n"
    for user in stats:
        text += f"üë§ <b>{user[0]}</b>\n"
        text += f"‚ñ™ –í—Å–µ–≥–æ —Å–º–µ–Ω: {user[1]}\n"
        text += f"‚ñ™ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {user[2]}\n"
        text += f"‚ñ™ –í—Å–µ–≥–æ —á–∞—Å–æ–≤: {user[3] or 0}\n\n"
    
    await message.answer(text, parse_mode="HTML")

# ================= –ó–ê–ü–£–°–ö =================
if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏
    os.makedirs('data', exist_ok=True)
    
    logger.info("üîÑ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    executor.start_polling(dp, skip_updates=True)